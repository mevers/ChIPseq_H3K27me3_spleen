# Snakemake workflow for the analysis of ChIP-seq data
#
# Author: Maurits Evers
# License: GPLv3
# Original date: 14-10-2016
# Last changed: 15-08-2017

from os.path import join
import re
import glob

def message(mes):
  sys.stderr.write("|--- " + mes + "\n")

#######################################################
################## Global variables ###################
#######################################################

# Config files
configfile: "config.yaml"

# Working directory
workdir: config["basedir"]

# IP and control ID
# Must match keys in config["samples"] dictionary
IP = "UBF"
CONTROL = "input"

#######################################################
######################### Targets #####################
#######################################################

# Snakemake workflow visualisation
VIS = expand("workflow/{graph}.{suf}",
    graph = ["rulegraph", "dag"],
    suf = ["pdf", "png"])

# Reference sequence
REF = join(
    config["refdir"],
    config["reference"]["id"],
    config["reference"]["filename"])

# bowtie2 index
IDX = expand(re.sub("fa", "{idx}.bt2", REF), idx = range(1,5))

# FASTQ targets
ALL_FASTQ = expand(join(config["fastqdir"], "{unit}"),
    unit = sum(config["units"].values(), []))

# FASTQC targets
ALL_FASTQC = expand(join(config["fastqcdir"], "{unit}_fastqc.zip"),
    unit = [w.replace(".fastq.gz", "")
        for w in sum(config["units"].values(), [])])

# BAM targets: sorted and sorted+deduped BAM files plus indices
ALL_BAM = expand(join(
    config["bamdir"],
    config["reference"]["id"],
    "{sample}.{suf}"),
    sample = config["units"].keys(),
    suf = [
        "bam",
        "sorted.bam",
        "sorted.bam.bai",
        "sorted.dedup.bam",
        "sorted.dedup.bam.bai"])

# BAM QC targets
BAM_FLAGSTAT = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "samtools/flagstat/flagstat_{sample}{src}.txt"),
    sample = config["units"].keys(),
    src = [".sorted", ".sorted.dedup"])
BAM_INSERT_SIZE = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "picard-tools/insert_size/insert_size_{sample}{step}.{suf}"),
    sample = config["units"].keys(),
    step = [".sorted", ".sorted.dedup"],
    suf = ["txt", "pdf"])
BAM_DISTR_DUPES = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "picard-tools/dupes/plot.distr_dupes_{what}.pdf"),
    what = ["frac", "DPK"])
BAM_COV = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "samtools/bedcov/plot.coverage.{suf}"),
    suf = ["pdf", "png"])
#ALL_BAM_QC = BAM_FLAGSTAT + BAM_INSERT_SIZE + BAM_DISTR_DUPES + BAM_COV
ALL_BAM_QC = BAM_FLAGSTAT + BAM_DISTR_DUPES + BAM_COV

# deepTools targets
DT_COR = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/heatmap.cor.genome.bw{binwidth}.pdf"),
     #suf = ["_10kb", "_peaks"])
    binwidth = "10000")
DT_PCA = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/PCA.genome.bw{binwidth}.pdf"),
     #suf = ["_10kb", "_peaks"])
    binwidth = "10000")
DT_PCA2 = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/plot.PCA.{pc}.counts.all.genome.bw{binwidth}.pdf"),
    pc = ["PC1_vs_PC2", "PC2_vs_PC3"],
    binwidth = "10000")
DT_FP = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/plot.fingerprint.bw{binwidth}.skipZeros.pdf"),
    binwidth = "500")
DT_PROF = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/plot.scoreMatrix.{what}.bw{binwidth}.mat.pdf"),
    what = ["cov"],
    binwidth = config["deeptools"]["binsize"])
DT_PROF2 = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/plot.scoreMatrix.heatmap.k={kmeans}.bw{binwidth}.mat.pdf"),
    kmeans = config["deeptools"]["kmeans"],
    binwidth = config["deeptools"]["binsize"])
DT_CMP = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "deeptools/log2ratio.{sample}.vs_input.bw{binwidth}.bw"),
    sample = sum(config["samples"]["H3K27me3"].values(), []),
    binwidth = config["deeptools"]["binsize"])

DT_ALL = DT_COR + DT_PCA + DT_PCA2 + DT_FP + DT_PROF + DT_PROF2 + DT_CMP



# R plots
R_PLOTS = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "plots/plot.{what}.{suf}"),
    what = [
        "distr_dupes_frac", "distr_dupes_DPK",
        "coverage",
        "plot.PCA.PC1_vs_PC2.counts.all.genome.bw10000",
        "plot.PCA.PC2_vs_PC3.counts.all.genome.bw10000",
        "plot.fingerprint.bw500.skipZeros",
        "plot.scoreMatrix.bw????"],
    suf = ["pdf", "png"])

# MACS2 targets
ALL_MACS = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "MACS/{name}/{name}_{type}"),
    name = config["samples"].keys(),
    type = ["peaks.narrowPeak", "peaks.xls", "summits.bed"])
#MACS_BAM = expand(join(
#    config["analysisdir"],
#    config["reference"]["id"],
#    "MACS/{sample}.sorted.dedup.bam"),
#    sample = [x + "_" + y
#        for x in config["samples"].keys()
#            for y in config["samples"][x].keys()])
#MACS_PEAKS = expand(join(
#    config["analysisdir"],
#    config["reference"]["id"],
#    "MACS/{IP}_vs_{ctrl}_{output}"),
#    IP = IP,
#    ctrl = CONTROL,
#    output = ["peaks.narrowPeak", "peaks.xls", "summits.bed"])
#MERGED_PEAKS = join(
#    config["analysisdir"],
#    config["reference"]["id"],
#    "MACS/merged_peaks.bed")

# CN targets
CN_COV = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "samtools/bedcov/cov.genome_w{window}_s{step}.{sample}.bed"),
    window = config["bedtools"]["window_size"],
    step = config["bedtools"]["window_step"],
    sample = config["units"].keys())
CN_R = expand(join(
    config["analysisdir"],
    config["reference"]["id"],
    "CN/CN_noZeros.pdf"),
    window = config["bedtools"]["window_size"],
    step = config["bedtools"]["window_step"])

#QUALIMAP = join(
#    config["analysisdir"],
#    config["reference"]["id"],
#    "qualimap/multisampleBamQcReport.html")

#for smp in TMP:
#    message("Sample " + smp + " will be created")

#######################################################
###################### Includes #######################
#######################################################


include: "rules/vis_workflow.rules"
include: "rules/mhs_data.rules"
include: "rules/reference.rules"
include: "rules/qc.rules"
include: "rules/alignment.rules"
include: "rules/bam.rules"
include: "rules/R.rules"
include: "rules/CN.rules"
include: "rules/peak_calling.rules"


#######################################################
######################## Rules ########################
#######################################################

# Input fastq files
rule all:
    input:
         ALL_BAM_QC + DT_ALL
#        ALL_BAM_QC + DT_ALL + ALL_MACS
#        ALL_BAM_QC + DT_ALL + MACS_PEAKS + CN_R
